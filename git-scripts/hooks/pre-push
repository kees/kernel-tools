#!/bin/bash
set -e
#
# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

BASE=""
remote="$1"
url="$2"
#echo >&2 "pre-push: $remote $url"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

# Consume stdin
while read local_ref local_oid remote_ref remote_oid
do
#	continue # do nothing
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		# If we have a new branch, or if the remote HEAD is not an
		# ancestor of the local HEAD, we're probably doing a --force,
		# so we need to treat it as if we're pushing a new branch.
		if test "$remote_oid" = "$zero" || \
		   ! git merge-base --is-ancestor $remote_oid $local_oid
		then
			# New branch, examine all commits since most recent tag.
			since=$(git describe --tags --abbrev=0)
			range="$since..$local_oid"
			echo >&2 "pre-push: New branch. Checking $range"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
			echo >&2 "pre-push: Existing branch. Checking $range"
		fi
		~/bin/check_commits "$range"

		## Check for WIP commit
		#commit=$(git rev-list -n 1 --grep '^WIP\b' "$range")
		#if test -n "$commit"
		#then
		#	echo >&2 "Found WIP commit in $local_ref, not pushing"
		#	exit 1
		#fi
	fi
	echo >&2 "$local_ref"
done

# Refresh TOTP, if needed.
if ! ssh git@gitolite.kernel.org 2fa isval >/dev/null; then
	echo -n "Enter TOTP token: "
	stty -F /dev/tty -echo
	read token </dev/tty
	# Show the line feed
	echo ""
	stty -F /dev/tty echo
	ssh git@gitolite.kernel.org 2fa val "$token"
fi

exit 0
