#!/usr/bin/env python3
import os, sys, re
from collections import Counter

# Inspired by:
# git log --since=2020-01-01 | \
# >       grep -E '^    [^ ]*(Signed-off|Tested|Reported|Reviewed|Acked)[^ ]*-by:' | \
# >       cut -d: -f2- |
# >       sed -e 's/^ //g; s/^.*-by: *//g; s/</ </g; s/  / /g; s/>.*/>/g;' | \
# >       sed -e 's/^\([^<]*\)<.*>$/\1/g; s/"\(.*\)"/\1/g' | \
# >       grep -v @syzkaller | \
# >       sort -u

# Find people participating in 50+ commits since 2020-01-01:
# git log --since=2020-01-01 | ~/bin/identity-canonicalizer | sort -g > contributors.txt
# cat contributors.txt | awk '{if ($1 > 2) {print $0}}' >eligible.txt
# cat eligible.txt | awk '{if ($1 > 49) {print $0}}' >ballots.txt

# Find these lines, and keep the email portion
by = re.compile(r'^    [^ ]*(Signed-off|Tested|Reported|Reviewed|Acked)[^ ]*-by:(.*)')
# Split name from email, and remove trailing stuff after email
splitter = re.compile(r'^(.*)<(.*)>[^>]*$')
# HTML mailto
mailto = re.compile(r'^(.*<[^ ]*) ?<mailto:.*$')
# Bad email characters
bad_email = re.compile(r'([ <>])')
# Unwrap quoted names
quoted = re.compile(r'^"(.*)"$')
# Ignore affiliations
affiliated = re.compile(r'^(.*)\(.*\)$')
# Ignore these identities, which are bots, collectives, twitter handles, or intentionally no email.
email_ignore = re.compile(r'^(.*@syzkaller.*.appspot.*|syzkaller@googlegroups\.com|abaci-bugfix@linux.alibaba.com|(lpk|lkp)@intel.com|ci_notify@linaro.org|bot@kernelci.org|patchwork-bot\+.*@kernel.org|keescook\+coverity-bot@chromium.org|A cast of thousands|KASAN|Ryota Shiga(?: \(Flatt Security\))?|Thomas Sattler|many different companies|Coverity Static Analyzer.*|Marco Scardovi|https?://.*|Marian Rainer-Harbach|Max VA|.* working with ZDI|Android Treehugger Robot|tag, or it goes automatically\?|is not accompanied by a link to the report\.  Those links are|.* \(@[^@]*\))$')
# Ignore these names, which may use a "real" email address, but are considered bots.
name_ignore = re.compile(r'^(kernel test robot|coverity-bot)$')
# Ignore one-off typos.
typo_ignore = re.compile(r'^$')

# Best guess adjustment of names for changes, latinization, abbreviation, and typos.
# match: replacement
spelling = {
		"": None,
		"Ville Syrjala": "Ville Syrjälä",
		"Alexey Budankov": "Alexei Budankov",
		"Yuval Basson": "Yuval Bason",
		"Ricardo Ribalda": "Ricardo Ribalda Delgado",
		"Sean Wang": "Soul Huang",
		"Jernej Skrabec": "Jernej Škrabec",
		"Alexandru M Stan": "Alexandru Stan",
		"Bindu R": "Bindu Ramamurthy",
		"Daniel Almeida": "Daniel W. S. Almeida",
		"Wong, Vee Khee": "Wong Vee Khee",
		"Gabriel C": "Gabriel Craciunescu",
		"Enric Balletbo Serra": "Enric Balletbo i Serra",
		"Yao Lihua": "Lihua Yao",
		"Klaus Jensen": "Klaus Birkelund Jensen",
		"Alex Gagniuc": "Alexandru Gagniuc",
		"Michael Bringmann": "Michael W. Bringmann",
		"Wang Hui": "Hui Wang",
		"Rafael Tinoco": "Rafael David Tinoco",
		"Yi Chen": "Chen Yi",
		"Lee, Shawn C": "Lee Shawn C",
		"Eugeniy Paltsev": "Evgeniy Paltsev",
		"Manish": "Manish Chopra",
		": Phillip Lougher": "Phillip Lougher",
		"Aneesh Kumar": "Aneesh Kumar K.V.",
		"Aneesh Kumar K.V": "Aneesh Kumar K.V.",
		"zhangyi": "Zhang Yi Z",
		"Brad Warrum": "Bradley Warrum",
		"Wang Jian": "Jian Wang",
		"Jose Bollo": "José Bollo",
		"Yu Chen": "Chen Yu",
		"jeffrey.lin": "Jeffrey Lin",
		"Kevin Wangtao": "Tao Wang",
		"Vitaly Mayatskih": "Vitaly Mayatskikh",
		"Oza Oza": "Oza Pawandeep",
		"Sunil Kovvuri Goutham": "Sunil Goutham",
		"Yannick Fertre": "Yannick Fertré",
		"Wilson Chris P": "Chris Wilson",
		"Thomas Hellstrm": "Thomas Hellström",
		"Thomas Hellstrom": "Thomas Hellström",
		"Howard Chung": "Yun-Hao Chung",
		"Pandruvada Srinivas": "Srinivas Pandruvada",
		"Alexey Min": "Alexey Minnekhanov",
		"Ondrej Jirman": "Ondřej Jirman",
		"Javier GonzÃ¡lez": "Javier González",
		"David Airlie": "Dave Airlie",
		"Zhongjun Tan": "Tan Zhongjun",
		"Zqiang": "Zhang Qiang",
		"Qiang.zhang": "Zhang Qiang",
		"Justin M. Forbes": "Justin Forbes",
		# Maybe ignore names shorter than 3 chars?
		"sh": "Hui Su",
		"Raphael Gallais-Pou": "Raphaël Gallais-Pou",
		"XU pengfei": "Pengfei Xu",
		"Soenke Huster": "Sönke Huster",
		"Ondrej Mosnacek": "Ondrej Mosnáček",
		# https://lore.kernel.org/all/20220915012800.825196-1-SJLIN0@nuvoton.com/
		"SJLIN0": "Wallace Lin",
	   }

email_typos = {
		'mpatocka redhat com': 'mpatocka@redhat.com',
		'eraniangoogle.com': 'eranian@google.com',
		'mgross.linux.intel.com': 'mgross@linux.intel.com',
		# cb774bd35318c1b4cb61f6f2caac85537d07fbde
		'aspriel.gmail.com': 'aspriel@gmail.com',
		# 8a1ec3f3275479292613273a7be2ac87f2a7f6e6
		'imre.deak.intel.com': 'imre.deak@intel.com',
		# 8b097881b54cbc23dd78262ed88c9924d00ea457
		'Vineet Gupta                                          [arc]': 'vgupta@kernel.org',
		# 0cd9d33ace336bc424fc30944aa3defd6786e4fe
		'https://github.com/joanbm': 'joanbrugueram@gmail.com',
		# bcd97734318d1d87bb237dbc0a60c81237b0ac50
		# ee50e67ba0e17b1a1a8d76691d02eadf9e0f392c
		'mathew.j.martineau>@linux.intel.com': 'mathew.j.martineau@linux.intel.com',
		# d1f1cecc92ae0dba44eac3ce10baf4edb4553e41
		'irogers>@google.com': 'irogers@google.com',
	      }

full_replace = {
		# b88aef36b87c9787a4db724923ec4f57dfd513f3 typo
		'Zdenek Kabelac <mpatocka@redhat.com>': 'Zdenek Kabelac <zkabelac@redhat.com>',
		# 77422a8f6f61be1ef64978e9a94f40fed0d1634e typo
		'Roi Dayan <paulb@mellanox.com>': 'Roi Dayan <roid@nvidia.com>',
		# b04d910af330b55e1d5d6eb9ecd53a375a9cf81c typo
		'Longpeng &lt;<a href="mailto:longpeng2@huawei.com" target="_blank">longpeng2@huawei.com</a>&gt;<br>': 'Longpeng(Mike) <longpeng2@huawei.com>',
		# 81d46d693173a5c86a9b0c648eca1817ad5c0ae5 typo
		'Longpeng &lt;<a href="mailto:longpeng2@huawei.com" target="_blank">longpeng2@huawei.com</a>&gt;<br></blockquote><div><br></div><div>Acked-by: Jason Wang &lt;<a href="mailto:jasowang@redhat.com">jasowang@redhat.com</a>&gt;</div><div> </div><blockquote class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex">': 'Longpeng(Mike) <longpeng2@huawei.com>',
		# db405774f6a80c5607dcf43ec810f078bb5c660d typo
		'Greg Kroah-Hartman <gregkh@linuxfoundation.org>Cc: Dave Airlie <airlied@gmail.com>': 'Greg Kroah-Hartman <gregkh@linuxfoundation.org>',
		# 00bfe94e388fe12bfd0d4f6361b1b1343374ff5b typo
		'Subbaraya Sundeep <sgoutham@marvell.com>': 'Subbaraya Sundeep <sbhatta@marvell.com>',
		# Name order and uncolliding
		'Zhang Rui <rui.zhang@intel.com>': 'Rui Zhang <rui.zhang@intel.com>',
		# bda24462578ca2b0538d9257509070708ce41acc typo?
		'Ariel Bernstein <eric.yang2@amd.com>': 'Ariel Bernstein <Eric.Bernstein@amd.com>',
		# Uncolliding with 'Rong Chen <rong.chen@amlogic.com>'
		'Rong Chen <rong.a.chen@intel.com>': 'Rong A Chen <rong.a.chen@intel.com>',
		# Uncolliding with 'aaron.ma@canonical.com'
		'Aaron Ma <mapengyu@gmail.com>': 'Pengyu Ma <mapengyu@gmail.com>',
		# 2b9f28d5e8efad34f472542315911c5ee9a65b6c
		# 9f4ce5d72b8e7a1f750598407c99f9e39dfb12fc
		'Jason Wang <a class="moz-txt-link-rfc2396E" href="mailto:jasowang@redhat.com">&lt;jasowang@redhat.com&gt; </a>': 'Jason Wang <jasowang@redhat.com>',
		# fe80536acf8397827be77f9b8ada384b90e790d0
		'Martin <martin.varghese@nokia.com>': 'Martin Varghese <martin.varghese@nokia.com>',
		# Various
		'Taketo Kabe': 'Taketo Kabe <kabe@sra-tohoku.co.jp>',
		# Various
		'AngeloGioacchino Del Regno': 'AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>',
		# Various
		'Andrey Grodzovsky andrey.grodzovsky@amd.com': 'Andrey Grodzovsky <andrey.grodzovsky@amd.com>',
		# 5ddf994fa22f78ae3742d72520a8c3e8521d96cd
		'kernel test robot lkp@intel.com': 'kernel test robot <lkp@intel.com>',
		# 21f965221e7c42609521342403e8fb91b8b3e76e
		'Sherlock Holo sherlockya@gmail.com': 'Sherlock Holo <sherlockya@gmail.com>',
		# Various
		'Srinivas Pandruvada <srinivas.pI andruvada@linux.intel.com>': 'Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>',
		# d6020f4b26179481c7cb13aa94d7abcdfd8a4326
		'Hans Verkuil <hverkuil-cisco at xs4all.nl>': 'Hans Verkuil <hverkuil-cisco@xs4all.nl>',
		# a4d1846512e12f9e84be63b3f2f2165e4d0d2d1e
		'Uwe Kleine-König <(address hidden)>': 'Uwe Kleine-König <u.kleine-koenig@pengutronix.de>',
		# b2cfec52feb3bb737c4b65018ef4bfe9789e4be8
		'Inki Dae <m.szyprowski@samsung.com>': 'Inki Dae <inki.dae@samsung.com>',
		# a820190204aef0739aa3a067d00273d117f9367c
		'Martin <martin.leung@amd.com>': 'Martin Leung <martin.leung@amd.com>',
		# 10a9accd4842e6098cc27d79d43d7542254003bc
		'Ilya <Ilya.Bakoulin@amd.com>': 'Ilya Bakoulin <Ilya.Bakoulin@amd.com>',
		# e3290f883127159e3aa7957f30bd4266602d403e
		'Suraj Kandpal': 'Suraj Kandpal <suraj.kandpal@intel.com>',
		# aa8a950a5d6b2094830aff834198777371ff91ff
		'AceLan Kao <acelan.kao@canonical.com>': 'AceLan Kao <acelan@gmail.com>',
	     }

def guess_name(name):
	if name == None:
		return None
	if ", " in name:
		name = "%s %s" % tuple(name.split(', ',1))
	name = spelling.get(name, name)
	return name

def flatten(name):
	return name.lower()

class Person:
	def __init__(self, email, name=None):
		self.emails = [email]
		self.names = []
		self.commits = {}

		self.best_count = 0
		self.fullnames = {}
		self.best_name = None

		self.add_name(name)

	def has_name(self):
		if len(self.names) == 0:
			return False
		return True

	def has_email(self, email):
		for known in self.emails:
			if known == email:
				return True
		return False

	# Only for "absorb"
	def get_email(self):
		if len(self.emails) == 1:
			return self.emails[0]
		raise ValueError("Whoops, trying to get email when more than 1 exist: [%s]",
				 "] [".join(self.emails))

	def add_fullname(self, email, name=None):
		if name:
			fullname = "%s <%s>" % (name, email)
		else:
			fullname = '%s' % (email)

		self.fullnames.setdefault(fullname, 0)
		self.fullnames[fullname] += 1
		if self.fullnames[fullname] > self.best_count:
			self.best_name = fullname
			self.best_count = self.fullnames[fullname]

	def add_email(self, email):
		if email not in self.emails:
			self.emails.append(email)

	def add_name(self, name):
		if name:
			self.names.append(name)

	def add_commit(self, sha):
		self.commits.setdefault(sha, 0)
		self.commits[sha] += 1

	# For combining nameless Person
	def add_all_commits(self, other):
		for sha in other.commits:
			self.commits.setdefault(sha, 0)
			self.commits[sha] += other.commits[sha]

	# To find best email address.
	def collapse_aliases(self):
		drop = []
		add = dict()
		for fullname in self.fullnames:
			name = None
			email = fullname
			if '<' in email:
				name, email = fullname.split(' <',1)
				name = name.strip()
				if email.endswith('>'):
					email = email.split('>')[0]
			if '@' not in email:
				print(self.dump(True), file=sys.stderr)
				raise ValueError("missing @ in [%s]: %s" % (email, fullname))
			user, domain = email.split('@', 1)
			# No +, move on.
			if '+' not in user:
				continue
			# Reconstruct without +... suffix
			user = user.split('+', 1)[0]
			email = "%s@%s" % (user, domain)
			# If this is a novel email, move on.
			if not self.has_email(email):
				continue

			if name:
				collapsed = "%s <%s>" % (name, email)
			else:
				collapsed = '%s' % (email)
			add.setdefault(collapsed, 0)
			add[collapsed] += self.fullnames[fullname]
			drop.append(fullname)
		# Zero out any collapsed entries
		for fullname in drop:
			self.fullnames[fullname] = 0
		# Insert any new counts
		for fullname in add:
			self.fullnames.setdefault(fullname, 0)
			self.fullnames[fullname] += add[fullname]
		# Recount most used full name.
		self.best_name = None
		self.best_count = 0
		for fullname in self.fullnames:
			if self.fullnames[fullname] > self.best_count:
				self.best_name = fullname
				self.best_count = self.fullnames[fullname]

	def dump(self, show_all_emails=False):
		out = "%d\t%s" % (len(self.commits), self.best_name)
		if show_all_emails:
			for fullname in self.fullnames:
				if fullname != self.best_name:
					out += "\n\t%s" % (fullname)
			#for commit in self.commits:
			#	out += "\n\t\t%s" % (commit)
		return out

class Pool:
	def __init__(self):
		self.email_to_person = {}
		self.name_to_person = {}
		self.people = []
		# For debugging collisions.
		self.date = None

	def saw_email(self, person, email):
		person.add_email(email)
		self.email_to_person.setdefault(flatten(email), person)
		return person

	def saw_name(self, person, name):
		if name:
			person.add_email(name)
			self.name_to_person.setdefault(flatten(name), person)
		return person

	def collapse_aliases(self):
		for person in self.people:
			person.collapse_aliases()

	def absorb(self, complete, part):
		# Take all the commits
		complete.add_all_commits(part)
		# Remove old email entry
		email = flatten(part.get_email())
		del self.email_to_person[email]
		# Record email on the complete Person
		self.saw_email(complete, email)
		return complete

	def found(self, sha, email, name=None):
		#if sha == '4965e38fa064056021254af4656b1089a42dc764':
		#	print('track: %s: %s <%s>' % (sha, name, email), file=sys.stderr)
		person = None

		if '@' not in email:
			report = email
			if name:
				report = "%s <%s>" % (name, email)
			print("%s: ignoring email without @: %s" % (sha, report), file=sys.stderr)
			return
		hit = bad_email.search(email)
		if hit:
			char = hit.group(1)
			report = email
			if name:
				report = "%s <%s>" % (name, email)
			print("%s: ignoring email with '%s': %s" % (sha, char, report), file=sys.stderr)
			return

		person_by_email = self.email_to_person.get(flatten(email), None)
		if name:
			person_by_name = self.name_to_person.get(flatten(name), None)
		else:
			person_by_name = None

		if person_by_name and person_by_email:
			# If we find a Person entry with a name, and it has an
			# email conflict with a Person without a name, merge
			# the nameless Person with the named Person.
			if person_by_email != person_by_name and \
			   not person_by_email.has_name() and \
			   not person_by_name.has_email(email):
				#print("Absorbing:\nperson_by_email:\n%s\ninto person_by_name:\n%s" % (person_by_email.dump(show_all_emails=True), person_by_name.dump(show_all_emails=True)), file=sys.stderr)
				self.absorb(person_by_name, person_by_email)
				person_by_email = None
			else:
				person = person_by_email
				# If there are existing people with conflicting details, fail.
				if person_by_email != person_by_name:
					print("%s\nCollided %s (name:[%s] email:%s) on two people:\n%s\n\n%s" % (self.date, sha, name, email, person_by_email.dump(show_all_emails=True), person_by_name.dump(show_all_emails=True)), file=sys.stderr)
					return person

		# If we found a person by email only, add their name.
		if person_by_email and not person_by_name:
			person = self.saw_name(person_by_email, name)

		# If we found a person by name only, add their email.
		if person_by_name and not person_by_email:
			person = self.saw_email(person_by_name, email)

		# If we found a completely new person, create their entry.
		if not person:
			person = Person(email, name)
			self.people.append(person)
			self.saw_email(person, email)
			self.saw_name(person, name)

		# Record this email/name combo.
		person.add_fullname(email, name)
		# Record their activity on this sha.
		person.add_commit(sha)

		return person

	def set_date(self, date):
		self.date = date.strip()

	def dump(self, show_all_emails=False):
		out = []
		for person in self.people:
			out.append(person.dump(show_all_emails))
		return out

pool = Pool()
sha = None
for line in sys.stdin:
	if line.startswith('commit '):
		sha = line.split(' ')[1].strip()
		continue
	if line.startswith('Date: ') or line.startswith('AuthorDate: '):
		pool.set_date(" ".join(line.split(' ')[1:]))
		continue
	hit = by.search(line)
	if not hit:
		continue

	line = hit.group(2).strip()

	# Drop comment trailers
	if '#' in line:
		line = line.split('#', 1)[0].strip()

	# Fix pasted "mailto" tags
	hit = mailto.search(line)
	if hit:
		line = hit.group(1).strip()

	# Try to fix common trailing typos
	if '<' in line and not '>' in line:
		if line.endswith('.') or line.endswith(')'):
			line = line[:-1]
		line = line + '>'
	if line.endswith('>>'):
		line = line[:-1]

	#if sha == 'b04d910af330b55e1d5d6eb9ecd53a375a9cf81c':
	#	print("%s: %s" % (sha, line), file=sys.stderr)

	# Perform full-line replacements.
	line = full_replace.get(line, line)

	# Try to split name from email
	hit = splitter.search(line)
	if hit:
		email = hit.group(2).strip()
		name = hit.group(1).strip()

		hit = quoted.search(name)
		if hit:
			name = hit.group(1).strip()
		hit = affiliated.search(name)
		if hit:
			name = hit.group(1).strip()

		name = guess_name(name)
	else:
		email = line
		name = None

		# Special case: is this a malformed email lacking <>s that we can easily handle?
		# e.g.	Michal Kubecek mkubecek@suse.cz
		if ' ' in email:
			words = email.split(' ')
			last_word = words.pop()
			if '@' in last_word:
				email = last_word
				if email.startswith('<'):
					email = email[1:]
				if email.endswith('>'):
					email = email[:-1]
				if len(words) > 0:
					name = " ".join(words)

	# Ignore various emails.
	hit = email_ignore.search(email)
	if hit:
		continue

	# Replace email typos.
	email = email_typos.get(email, email)

	if name:
		# Ignore various names.
		hit = name_ignore.search(name)
		if hit:
			name = None

	if name:
		# Skip specific name+email typos.
		hit = typo_ignore.search('%s <%s>' % (name, email))
		if hit:
			continue

	person = pool.found(sha, email, name)

# Post-process to collapse "+"s in email aliases
pool.collapse_aliases()

full = False
if len(sys.argv) > 1:
	if sys.argv[1] == '--full':
		full = True

print("\n".join(pool.dump(full)))
